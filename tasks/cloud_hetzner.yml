---
- name: Build python virtual environment
  import_tasks: venv_hetzner.yml

- name: Include prompts
  import_tasks: prompts_hetzner.yml

- name: Create SSH keys
  local_action:
    module: hcloud_ssh_key
    api_token: "{{ hcloud_token }}"
    name: "{{ item.name }}"
    public_key: "{{ item.key }}"
  loop: "{{ ssh_keys }}"
  run_once: yes

- name: Get VM info - check if exists
  local_action:
    module: hcloud_server_info
    api_token: "{{ hcloud_token }}"
    name: "{{ hcloud_vm_name }}"
  register: info_vm

- name: Print the gathered infos
  debug:
    var: info_vm

- name: Register the ip address if VM already exists
  add_host:
    hostname: '{{ hostvars[item].inventory_hostname }}'
    ansible_host: '{{ hostvars[item].info_vm.hcloud_server_info[0].ipv4_address }}'
  when: hostvars[item].info_vm.hcloud_server_info|count == 1
  with_items: "{{ ansible_play_hosts }}"

- name: Create a server
  local_action:
    module: hcloud_server
    api_token: "{{ hcloud_token }}"
    name: "{{ hcloud_vm_name }}"
    server_type: "{{ hcloud_server_type }}"
    location: "{{ hcloud_server_type }}"
    image: "{{ hcloud_image }}"
    state: present
    ssh_keys: "{{ ssh_keys|map(attribute='name')|list }}"
  register: create_vm

- name: Create network
  local_action:
    module: hcloud_server_network
    network: "{{ hcloud_network_name }}"
    server: "{{ hcloud_vm_name }}"
    ip: "{{ hcloud_vm_private_ip }}"
    state: present
  when: hcloud_create_network and hcloud_network_name and hcloud_vm_private_ip

- name: Create volume
  local_action:
    module: hcloud_volume
    api_token: "{{ hcloud_token }}"
    name: "{{ hcloud_volume_name }}"
    format: ext4
    server: "{{ hcloud_vm_name }}"
    size: "{{ hcloud_vm_size_gb }}"
    state: present
  register: info_volume
  when: hcloud_create_volume and hcloud_volume_name

- name: Print the gathered infos
  debug:
    var: info_volume
  when: hcloud_create_volume and hcloud_volume_name

- name: Export device name
  set_fact:
    device_name: "{{ info_volume.hcloud_volume.linux_device }}"
  when: hcloud_create_volume and hcloud_volume_name

- name: Format and resize the volume if necessary
  community.general.filesystem:
    fstype: ext4
    dev: "{{ device_name }}"
    state: present
    resizefs: yes
  when: hcloud_create_volume and hcloud_volume_name

- name: Mount the volume
  mount:
    src: "{{ device_name }}"
    state: mounted
    fstype: ext4
    path: "{{ hcloud_volume_mount }}"
    opts: 'discard,nofail,defaults'
  when: hcloud_create_volume and hcloud_volume_name and hcloud_volume_mount

- name: scan and register ssh key from new vm
  local_action:
    module: ansible.builtin.command
    argv:
      - ssh-keyscan
      - "{{ansible_host|default(inventory_hostname)}}"
  register: "host_keys"
  changed_when: false


- name: Check that the known hosts file exists
  local_action:
    module: ansible.builtin.stat
    path: "{{known_hosts}}"
  register: known_hosts_stat

- name: touch known hosts file
  become: no
  local_action:
    module: ansible.builtin.file
    path: "{{known_hosts}}"
    state: touch
  run_once: true
  when: known_hosts_stat.stat.exists

- name: add to known hosts file
  local_action:
    module: ansible.builtin.blockinfile
    dest: "{{known_hosts}}"
    marker: "# {mark} This part managed by Ansible"
    block: |
      {% for h in groups['all'] if hostvars[h].host_keys is defined %}  
      {{ hostvars[h].host_keys.stdout }}  
      {% endfor %}
  run_once: true
  when: known_hosts_stat.stat.exists

- set_fact:
    cloud_instance_ip: "{{ create_vm.hcloud_server.ipv4_address }}"
#    ansible_ssh_user: algo
#    ansible_ssh_port: "{{ ssh_port }}"
#    cloudinit: true